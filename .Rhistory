a
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100, prob(0.7))
rbinom(1,size=100, prob=0.7)
flips2 <-rbinom(1,size=100, prob=0.7)
a
flips2 <- rbinom(100,1,0.7)
flips2
sum(flips)
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,sd=1)
rnorm(10, mean = 100, sd = 25)
rpois(10)
rpois(5,10)
replicate(100,rpois(5,10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <-colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2<- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min.
t2
t2$min
weekdays(d1)
months(t1)
quarters(t2)
te <- "October 17, 1986 08:24"
t3 <- "October 17, 1986 08:24"
strptime(t3)
a
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
o
a
Sys.time() > t1
Sys.time(t1)
a
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
a
plot(x = cars$speed, y = cars$dist)
e
plot(x = cars$dist, y = cars$speed)
speed
x
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = "Stopping Distance", xlab = "Speed")
a
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance", xlab="Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance", xlab="Speed",main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot",)
A
a
plot(cars, sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle", col=2)
plot(cars, col = 2)
a
plot(cars, xlim = c(10, 15)) t
plot(cars, xlim = c(10, 15))
plot(cars, pch
)
a
plot(cars, pch = 2)
mtcars
data("mtcars")
data(mtcars)
?boxplot
a
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
set.seed(1)
sample(1:10,4)
samples(letters,5)
sample(letters,5)
sample(1:10)
sample(1:10)
sample(1:10,replace=TRUE)
system.time(readLines("http://fcfm.buap.mx"))
system.time(readLines("http://www.fcfm.buap.mx"))
?outer
hilbert(1000)
hilbert <- function(n){
i <- 1:n
1/outer(i-1,i,"+")
}
hilbert(1000)
?svd
system.time(svd(x))
system.time(x <- hilbert(1000))
system.time(svd(x))
system.time(x <- hilbert(1000))
system.time(svd(x))
?unclass
View(flag_colors)
x <- list(1,"a", TRUE, 1+4i)
x
class(x)
m <-matrix(nrow=2, ncol=3)
m
dim(m)
attributes(m)
#Cambio de dimesiones de 2x3 a 3x2
dim(m) <-c(3,2)
m
?str
m <- matrix(1:6,3,3, T)
m
class(m)
str(m)
dim(m) <- c(2,5)
x <- factor(c("si","no","si","si","no","si","no"))
x
x <- factor(c("si","no","si","si","no","si","no"))
x
table(x)
unclass(x)
x <- factor(c("si","no","si","si","no","si","no"), levels=c("si","no"))
unclass(x)
x
?lm
?dimnames
?dump
y <- data.frame(a=1,b="a")
dput(y)
y <- data.frame(a=1,b="a")
dput(y)
y
?dput
?rm
bla <-head(airquality)
dput(bla,file="airquality.R
bla <-head(airquality)
dput(bla,file="airquality.R")
x <- "Programaci??n Actuarial III"
y <- data.frame(a=1, b="a")
dump(c("x","y"),file= "data.R")
x <- list(foo= 1:4, bar= 0.6)
#Extraemos el primer elemento de la lista
#este elemento es una lista que contiene una secuencia
x[1]
#Extraemos nuevamente el primer elemento de la lista,
#ahora el elemento es la secuencia en s??
x[[1]]
y <- 10
f <- function(x){
y <-2
y^2 +g(x)
}
g <- function(x){
x*y
}
f(3)
?sd
x <- c(4,TRUE)
class(x)
x <- list(2, "a","b",TRUE)
x[[2]]
x <- 1:4
y <-2
x+y
args(airquality)
airquality
for (1:153)
for (1:153){}
airquality($ozone)
airquality($Ozone)
x <- airquality[$Ozone]
x <- airquality$Ozone
x
mean(x)
mean(x,na.rm=TRUE)
x <- airquality(Ozone>31, Temp>90)
mean(203,225,237,188,167,197,183,189,267,272,291)
for (i in 1:143){
vec<-vector()
x<-0
if airquality$Ozone[,1]>31 && airquality$Temp[,1]>90{
x<-x+1
y <- airquality$Solar.R[,x]
vec<-vec(y)
}else{
x<-x
}
w<- mean(vec)
w
}
for (i in 1:143){
vec<-vector()
x<-0
if airquality$Ozone[,1]>31 && airquality$Temp[,1]>90{
x<-x+1
y <- airquality$Solar.R[,x]
vec<-vector(y)
}else{
x<-x
}
w<- mean(vec)
w
}
for (i in 1:143){
vec<-vector()
x<-0
if (airquality$Ozone[,i]>31) && (airquality$Temp[,i]>90){
x<-x+1
y <- airquality$Solar.R[,x]
vec<-vector(y)
}else{
x<-x
}
w<- mean(vec)
w
}
for (i in 1:143){
vec<-vector()
x<-0
if (airquality$Ozone[,i]>31) && (airquality$Temp[,i]>90){
x<-x+1
y <- airquality$Solar.R[,x]
vec<-vector(y)
}else{
x<-x
y <- airquality$Solar.R[,x]
vec<-vector(y)
}
w<- mean(vec)
w
}
y<-6
airquality($Month)
airquality$Month
airquality$Month==6
if (airquality$Month==6)=TRUE
?subset
?split
mejor <- function(estado, resultado) {
# Lectura de datos
data <- read.csv("outcome-of-care-measures.csv")
if (resultado=="ataque"){
datos <-split(data,data$Hospital 30-Day Death (Mortality) Rates from Heart Attack)
datos
}
# Revisión de la validez de estado y resultado
# Regresa el nombre del hospital con la tasa más baja de mortalidad de 30 días
}
mejor <- function(estado, resultado) {
# Lectura de datos
data <- read.csv("outcome-of-care-measures.csv")
if (resultado=="ataque"){
datos <-split(data,data[,11])
datos
}
# Revisión de la validez de estado y resultado
# Regresa el nombre del hospital con la tasa más baja de mortalidad de 30 días
}
getwd()
mejor <- function(estado, resultado) {
setwd("/Users/Laura/Documents/Programacion_Actuarial_III/Calidad de Hospitales -data")
# Lectura de datos
data <- read.csv("outcome-of-care-measures.csv")
if (resultado=="ataque"){
datos <-split(data,data[,11])
datos
}
# Revisión de la validez de estado y resultado
# Regresa el nombre del hospital con la tasa más baja de mortalidad de 30 días
}
mejor(TX, ataque)
setwd("/Users/Laura/Documents/Programacion_Actuarial_III/Calidad de Hospitales -data")
mejor <- function(estado, resultado) {
# Lectura de datos
data <- read.csv("outcome-of-care-measures.csv")
if (resultado=="ataque"){
datos <-split(data,data[,11])
datos
}
# Revisión de la validez de estado y resultado
# Regresa el nombre del hospital con la tasa más baja de mortalidad de 30 días
}
mejor(TX,ataque)
split(airquality,airquality$Ozone)
setwd("/Users/Laura/Documents/Programacion_Actuarial_III/Calidad de Hospitales -data")
mejor <- function(estado, resultado) {
# Lectura de datos
data <- read.csv("outcome-of-care-measures.csv")
if (resultado=="ataque"){
columna<- 11
}else{
if (resultado=="falla")
columna<- 17
}else{
if (resultado=="neumonia")
columna <- 23
}else{
stop("Resultado inválido")
}
# Revisión de la validez de estado y resultado
# Regresa el nombre del hospital con la tasa más baja de mortalidad de 30 días
}
setwd("/Users/Laura/Documents/Programacion_Actuarial_III/Calidad de Hospitales -Data")
mejor <- function(estado, resultado){
#Lectura de datos
if (resultado =="ataque"){
col <- 11
}else{
if(resultado=="falla"){
col <- 17
}else{
if (resultado=="neumonia"){
col <- 23
}else{
stop("Resultado inválido") #Revisión de la validez de resultado
}
}
}
}
setwd("/Users/Laura/Documents/Programacion_Actuarial_III/Calidad de Hospitales -Data")
mejor <- function(estado, resultado){
#Lectura de datos
if (resultado =="ataque"){
col <- 11
}else{
if(resultado=="falla"){
col <- 17
}else{
if (resultado=="neumonia"){
col <- 23
}else{
stop("Resultado inválido") #Revisión de la validez de resultado
}
}
}
estado <- data$State
estado
}
mejor(TX,neumonia)
mejor(TX,"neumonia")
?closure
rankingcompleto <- function(resultado,num="mejor"){
setwd("/Users/Laura/Documents/Programacion_Actuarial_III/")
data <- read.csv("outcome-of-care-measures.csv")
if (resultado=="ataque"){
col <- 11
}else{
if (resultado=="falla"){
col <- 17
}else{
if (resultado=="neumonia"){
col <- 23} else{
stop("Resultado inválido")
}
}
}
est <- data$State
states <- levels(as.factor(est))
num2<-num[1]
if (length(num)==1){
if(num2=="mejor"){num <-1}
final <- vector("character")
datos <- data.frame(data$Hospital.Name,data$State,data[,col])
for (estadoo in states) {
y<-subset(datos,datos$data.State==estadoo)
z <- y
for (i in 1:length(z[,3])) {
if(z[i,3]=="Not Available"){z[i,3]<-NA}
}
Mortalidad<- as.numeric(as.character(z[,3]))
x<-data.frame(z$data.Hospital.Name,Mortalidad)
if(num2=="peor"){
maxi<- max(x[,2],na.rm = TRUE)
x2 <- subset(x,x[,2]==maxi)
x3 <- rev(sort.default(x2[,1]))
resul <- as.character(x3[1])
final<- c(final,resul)
}else{
ordenar<- sort.default(x[,2],na.last = TRUE)
head(ordenar,10)
selec<-ordenar[num]
x2 <- subset(x,x[,2]==selec)
x4 <- subset(x,x[,2]<selec)
resta <- nrow(x4)
selec2 <- num-resta
x3 <- sort.default(x2[,1])
resul <- as.character(x3[selec2])
final<- c(final,resul)
}
}
tabla <- data.frame(hospital=final,estado=states)
tabla
} else { stop("Número invalido")}
}
rankingcompleto("ataque",20)
setwd("/Users/Laura/Documents/Programacion_Actuarial_III/")
rankhospital <- function(estado, resultado, num){
hospitalsData<-read.csv("hospital-data.csv")
states<-levels(hospitalsData[,7])
data<-read.csv("outcome-of-care-measures.csv")
arrayOfPos<-c("character")
arrayOfVals<-numeric(0)
v1<-NA
v2<-NA
if (estado %in% states==F){
stop("Estado invalido")
}
if(resultado=="ataque"){
col<-11
}
else{
if(resultado=="falla"){
col<-17
}
else{
if(resultado=="neumonia"){
col<-23
}
else{
stop("Resultado invalido")
}
}
}
pos<-1
for(i in 1:nrow(data)){
if (data[i,7]==estado){
if(data[i,col]!="Not Available"){
arrayOfPos[pos]<-as.character(data[i,2])
aux<-as.character(data[i,col])
#print(aux)
arrayOfVals[pos]<-as.numeric(aux)
#print(arrayOfVals[pos])
pos<-pos+1
}
}
}
result<-data.frame(nombre=arrayOfPos,valor=arrayOfVals)
result<-result[with(result,order(valor,nombre)),]
printable<-order(result$valor,result$nombre)
#print(result)
print(result[printable[num],])
if (num=="mejor"){
print(result[printable[1],])
}else{
if (num=="peor"){
print(result[printable[length(printable)],])
}
}
}
rankhospital("TX","falla",4)
setwd("/Users/Laura/Documents/Programacion_Actuarial_III/")
data<-read.csv("hospital-data.csv")
states<-levels(data[,7])
#print(states)
mejor <- function(estado, resultado){
data<-read.csv("hospital-data.csv")
states<-levels(data[,7])
hospitals<-read.csv("outcome-of-care-measures.csv")
if (estado %in% states==F){
stop("Estado invalido")
}
if(resultado=="ataque"){
col<-11
}
else{
if(resultado=="falla"){
col<-17
}
else{
if(resultado=="neumonia"){
col<-23
}
else{
stop("Resultado invalido")
}
}
}
col2<- subset(hospitals,hospitals[,col]!="Not Available" & hospitals[,7]==estado)
col2[,col] <- as.numeric(as.character(col2[,col]))
mini <-min(col2[,col])
name <- subset(col2[,2],col2[,col]==mini)
name<- sort(name)
print(name[1])
}
mejor("TX","ataque")
mejor("MD","falla")
rankhospital("FL","neumonia")
rankhospital("FL","neumonia",45)
rankingcompleto("neumonia",60)[5:10,]
