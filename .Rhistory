if (resultado=="ataque"){
datos <-split(data,data[,11])
datos
}
# Revisión de la validez de estado y resultado
# Regresa el nombre del hospital con la tasa más baja de mortalidad de 30 días
}
mejor(TX,ataque)
split(airquality,airquality$Ozone)
setwd("/Users/Laura/Documents/Programacion_Actuarial_III/Calidad de Hospitales -data")
mejor <- function(estado, resultado) {
# Lectura de datos
data <- read.csv("outcome-of-care-measures.csv")
if (resultado=="ataque"){
columna<- 11
}else{
if (resultado=="falla")
columna<- 17
}else{
if (resultado=="neumonia")
columna <- 23
}else{
stop("Resultado inválido")
}
# Revisión de la validez de estado y resultado
# Regresa el nombre del hospital con la tasa más baja de mortalidad de 30 días
}
setwd("/Users/Laura/Documents/Programacion_Actuarial_III/Calidad de Hospitales -Data")
mejor <- function(estado, resultado){
#Lectura de datos
if (resultado =="ataque"){
col <- 11
}else{
if(resultado=="falla"){
col <- 17
}else{
if (resultado=="neumonia"){
col <- 23
}else{
stop("Resultado inválido") #Revisión de la validez de resultado
}
}
}
}
setwd("/Users/Laura/Documents/Programacion_Actuarial_III/Calidad de Hospitales -Data")
mejor <- function(estado, resultado){
#Lectura de datos
if (resultado =="ataque"){
col <- 11
}else{
if(resultado=="falla"){
col <- 17
}else{
if (resultado=="neumonia"){
col <- 23
}else{
stop("Resultado inválido") #Revisión de la validez de resultado
}
}
}
estado <- data$State
estado
}
mejor(TX,neumonia)
mejor(TX,"neumonia")
?closure
getwd()
tail(list.files((),2))
tail(list.files(),2)
setwd("./testdir")
setwd("./data.R")
setwd("../")
getwd()
setwd("~")
getwd()
?file.exists
?dir.create
x <- c("Data")
if file.exists(x)==F{
dir.create(x)
}
if (!file.exists("data")){
dir.create("data")
}
url <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(url, destfile = "./data/camaras.csv")
list.files("./data")
url <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(url, destfile = "./data/camaras.csv")
list.files("./data")
fechaDescarga<- date()
fechaDescarga
#Crear una carpeta para guardar los datos descargados
if (!file.exists("data")) dir.create("data")
#Descargar datos de internet
url <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(url, destfile = "./data/camaras.csv")
list.files("./data")
fechaDescarga<- date()
fechaDescarga
url <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(url, destfile = "./data/camaras.csv",method = "curl")
list.files("./data")
fechaDescarga<- date()
fechaDescarga
dataCam <- read.table("./data/camaras.csv")
?read.table
dataCam <- read.table("./data/camaras.csv", sep=",", header=T)
head(dataCam)
if (!file.exists("data")) dir.create("data")
#Descargar datos de internet
url <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD&bom=true"
download.file(url, destfile = "./data/camaras.csv",method = "curl")
list.files("./data")
fechaDescarga<- date()
install.packages("rJava")
install.packages("xlsx")
install.packages("XML")
library(XML)
url <- "http://www.w3schools.com/xml/simple.xml"
data <- xmlTreeParse(url, useInternalNodes = TRUE)
nodoRaiz <- xmlRoot(data)
xmlName(nodoRaiz)
names(nodoRaiz)
nodoRaiz[[1]]
nodoRaiz[[1]][[1]]
xmlSApply(nodoRaiz,xmlValue)
xpathSApply(nodoRaiz,"//name",xmlValue)
xpathSApply(nodoRaiz,"//price",xmlValue)
install.packages("jsonlite")
library(jsonlite)
jsonData <- formJson("http://api.github.com/users/LauraCrystel/repos")
jsonData <- fromJson("http://api.github.com/users/LauraCrystel/repos")
jsonData <- fromJSON("http://api.github.com/users/LauraCrystel/repos")
names(jsonData)
jsonData$name
iris
?cat
myjson <-toJSON(iris, pretty=TRUE)
cat(myjson)
?pretty
iris2 <- fromJSON(myjson)
head(iris2)
#Data table
library(data.table)
DF=data.frame(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
DF=data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
tables()
#Data table
library(data.table)
DF=data.frame(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
DT=data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
tables()
#Data table
library(data.table)
DF=data.frame(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DF,3)
DT=data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DT,3)
tables()
library(data.table)
DF=data.frame(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DF,3)
DT=data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DT,3)
tables()
DF=data.frame(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DF,3)
DT=data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DT,3)
DT <-data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DT,3)
tables()
data.table?
install.packages("data.table)
install.packages("data.table")
#Data table
library(data.table)
DF=data.frame(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DF,3)
DT =data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DT,3)
tables()
DT[2,]
DT[DT$y=="a",]
DT
DT$y=c("a","a","a","b","b","b","c","c","c")
DT[DT$y="a"]
DT[DT$y=="a"]
DT[DT$y=="b"]
DT[DT$y=="c"]
DT[DT$y=="a",]
DT$y==c("a","a","a","b","b","b","c","c","c")
DT[c(2,3)]
DT[,c(2,3)]
DT[,w:=z^2]
DT
DT2 <- DT
DT[,y:=2]
DT
DT2
?tmp
DT[,m:={tmp <-(x+y);log2(tmp+5)}]
DT
DT[,m:={tmp <-(x+y); log2(tmp+5)}]
DT
set.seed(123)
DT<-data.table(x=sample(letters[1:3],1E5,TRUE))
DT[,.N,by=x]
set.seed(123)
DT<-data.table(x=sample(letters[1:3],1E5,TRUE))
DT[,.N,by=x]
DT
DT[,]
?data.table
library(swirl)
install_from_swirl("Getting_and_Cleaning_Data")
swirl()
swirl()
swirl()
install.packages("dplyr")
install.packages("dplyr")
swirl()
1
library(swirl)
install_from_swirl("Getting_and_Cleaning_Data")
swirl()
?read.csv
read.csv()
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head()
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:2
5:10
a
select(5:20)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(dran,-time)
select(cran,-time)
-5:20
-(5:20)
.
select(-(X:size))
a
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran,r_version=="3.1.1",country=="US")
?Comparison
filter(cran,r_version=="3.0.2",country=="IN")
filter(cran,r_version<="3.0.2",country=="IN")
filter(cran,country=="US"|country=="IN")
filter(cran,size>100500,r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran.select()
arrange(cran.select(ip_id))
cran2 <- arrange(select(ip_id))
a
select(cran, size:ip_id)
cran2 <-select(cran, size:ip_id)
arrange(cran2,ip_id)
desc(ip:id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version))
a
arrange(cran2,country,desc(r_version),ip_id)
cran3 <- select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^10)
mutate(cran3,size_mb=size/2^10,size_gb/2^10)
mutate(cran3,size_mb=size/2^10,size_gb=size_mb/2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
a <-summarize(cran, avg_bytes= mean(size))
summarize(cran, avg_bytes = mean(size))
library(dplyr)
tbl_df()
tbl_df(mydf)
cran<.tbl_df(mydf)
cran<-tbl_df(mydf)
rm("mydf")
cran
group_by(mydf)
group_by(cran)
a
?group_by
by_package
by_package <-group_by(cran,package)
by_package
by_package(summarize(mean(size)))
a
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count,probs = 0.99)
top_counts <- filter(pack_sum,count>679)
top_counts
View(top_counts)
arrange(pack_sum,desc(count))
arrange(top_counts, desc(count))
top_counts_sorted<-arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique,probs=0.99)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
arrange(pack_sum,desc(unique))
top_unique_sorted<-arrange(pack_sum,desc(unique))
top_unique_sorted <-arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res <- gather(students2,key=sex_class,value=count)
res <-gather(students2,sex_class,count,-grade)
res
?separate
separate(data=res,col=sex_class,into=c("sex","class"))
submit()
submit
submit()
submit()
submit()
submit()
library(swirl)
swirl()
library(swirl)
install_from_swirl("Getting_and_Cleaning_Data")
swirl()
submit()
a
.
submit()
submit()
reset()
submit()
swirl()
students2 %>%
gather( sex_class,count ,grade ) %>%
separate( data=res, col=sex_class,into=c("sex", "class")) %>%
print
students2 %>%
gather( sex_class,count ,grade ) %>%
separate( col=sex_class,into=c("sex", "class")) %>%
print
submit()
submit()
skip
skip()
students3
skip()
?spread
reset()
skip
skip()
skip()
swirl()
skip()
library(readr)
parse_number("class5")
skip()
students4
skip()
skip()
skip()
skip()
View(failed)
failed
skip()
skip()
skip()
sat
skip()
skip()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package="lubridate")
help(package=lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
skip()
ymd("March 12, 1975")
skip()
skip()
ymd("192012")
ymd("1920-1-2")
dt1
ynd_hms(dt1)
ymd_hms(dt1)
skip()
dt2
skip()
skip()
this_moment
update(this_moment)
skip()
this_moment
skip()
nyc
skip()
depart
update(depart)
skip()
depart
skip()
?with_tz
skip()
arrive
skip()
last_time
?interval
how_long<- interval(last_time,arrive)
as.period(how_long)
stopwatch()
DT <- data.table(x=rep(letters[1:3],each=100),y=rnorm(300))
setkey(DT,x)
DT['a']
library(data.table)
DT <- data.table(x=rep(letters[1:3],each=100),y=rnorm(300))
setkey(DT,x)
DT['a']
set.seed(1)
df_gde <- data.frame(x=rnorm(1E6),y=rnorm(1E6))
file <- tempfile()
write.table(df_gde,file=file,row.names = F,col.names = T,sep="\t",quote=F)
system.time(fread(file))
system.time(read.table(file,header = T,sep="\t"))
?tempfile
install.package("RMySQL")
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuerey(ucscDb,"show databasess;");dbDisconnect(ucscDb)
result
install.packages("RMySQL")
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuerey(ucscDb,"show databasess;");dbDisconnect(ucscDb)
result
install.packages("RMySQL")
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuerey(ucscDb,"show databasess;");dbDisconnect(ucscDb)
result
library(RMySQL)
install.packages("RMySQL")
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuerey(ucscDb,"show databasess;");dbDisconnect(ucscDb)
result
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL")
library(RMySQL)
install.packages("RMySQL",dependencies = T)
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuerey(ucscDb,"show databasess;");dbDisconnect(ucscDb)
result
install.packages("RMySQL", dependencies = T)
install.packages("RMySQL", dependencies = T)
setwd("~/Documents/Programacion_Actuarial_III")
install.packages("RMySQL", dependencies = T)
install.packages("RMySQL", dependencies = T)
library("RMySQL")
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuerey(ucscDb,"show databasess;");dbDisconnect(ucscDb)
result <- dbGetQuery(ucscDb,"show databasess;");dbDisconnect(ucscDb)
result <- dbGetQuery(ucscDb,"show databasess;")
result <- dbGetQuery(ucscDb,"show databases;")
dbDisconnect(ucscDb)
result
hg19 <- dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
tablas <- dbListTables(hg19)
length(tablas)
tablas[1:3]
?query
fetch()
?fetch
dbDisconnect(hg19)
